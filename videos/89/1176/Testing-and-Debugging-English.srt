<b>Narration</b>

1
00:00:01 --> 00:00:05
Welcome to the spoken tutorial on <b>Testing and debugging.</b>

2
00:00:06 --> 00:00:10
In this tutorial, you will,  Understand what is <b>software testing </b>

3
00:00:11 --> 00:00:14
Test simple <b>functions</b> for their <b>functionality </b>

4
00:00:15 --> 00:00:16
<b>Automate tests </b>

5
00:00:17 --> 00:00:24
Understand the need for <b>coding style</b> and Learn some of the <b>standards</b> followed by the <b>Python Community</b>

6
00:00:25 --> 00:00:31
To record this tutorial, I am using
<p><b>Ubuntu Linux 16.04</b> operating system 
</p>

7
00:00:32 --> 00:00:34
<b>Python 3.4.3 </b>

8
00:00:35 --> 00:00:41
<b>IPython 5.1.0</b> and <b>Gedit text editor</b>

9
00:00:42 --> 00:00:47
To practise this tutorial, you should know how to use <b>functions.</b>

10
00:00:48 --> 00:00:52
If not, see the relevant <b>Python</b> tutorials on this website.

11
00:00:53 --> 00:00:56
First we will learn about software testing.

12
00:00:57 --> 00:01:03
<b>Software testing</b> is the process to evaluate the functionality of a software or a <b>program.</b>

13
00:01:04 --> 00:01:09
It helps to find whether the program met the specified requirements or not.

14
00:01:10 --> 00:01:15
It ensures a defect free program so that we will get a quality program.

15
00:01:16 --> 00:01:22
All the codes used in this tutorial are available in the <b>Code Files</b> link of this tutorial.

16
00:01:23 --> 00:01:27
You should download in the current working directory and use them.

17
00:01:28 --> 00:01:32
Open any text editor and type the following code.

18
00:01:33 --> 00:01:37
This is a simple <b>function</b> to calculate <b>gcd</b> of two numbers.

19
00:01:38 --> 00:01:42
We need a set of <b>inputs</b> for the variable a and b.

20
00:01:43 --> 00:01:49
Save the file as <b>find</b> underscore <b>gcd.py</b> in the current <b>working directory.</b>

21
00:01:50 --> 00:01:55
Next we will open the file <b>test</b> underscore <b>gcd.py.</b>

22
00:01:56 --> 00:02:01
Let our test case be 48 and 64 as <b>a</b> and <b>b. </b>

23
00:02:02 --> 00:02:10
For this test case we know that the GCD is 16. So that is the expected <b>output.</b>

24
00:02:11 --> 00:02:14
Let us now run the <b>script</b> and <b>test</b> our <b>code. </b>

25
00:02:15 --> 00:02:23
Open the <b>terminal</b> and type <b>python3 test</b> underscore <b>gcd.py</b>

26
00:02:24 --> 00:02:29
We get the <b>output</b> as <b>Test Passed</b> which means our <b>code</b> is correct.

27
00:02:30 --> 00:02:35
But there can be a number of cases where the <b>gcd function</b> might break.

28
00:02:36 --> 00:02:41
So, to check where our code is breaking we should run many tests.

29
00:02:42 --> 00:02:45
This is where the concept of automating tests comes in.

30
00:02:46 --> 00:02:50
Let us first try and automate tests on the <b>gcd function. </b>

31
00:02:51 --> 00:02:57
Open the file <b>textcases.txt</b> where the various testing parameters are given.

32
00:02:58 --> 00:03:02
The structure of the file will have two <b>input parameters. </b>

33
00:03:03 --> 00:03:10
The third <b>parameter</b> is the correct <b>output result</b>. We have separated the elements by a space.

34
00:03:11 --> 00:03:17
Next let us open the file <b>automate</b> underscore <b>test</b> underscore <b>gcd.py</b>

35
00:03:18 --> 00:03:25
First we need <b>import gcd function</b> from <b>find</b> underscore <b>gcd</b> in order to use it for testing.

36
00:03:26 --> 00:03:31
Next the <b>testcases.txt</b> file is read line by line.

37
00:03:32 --> 00:03:37
The first two <b>input parameters</b> are assigned to the variables <b>x</b> and <b>y.</b>

38
00:03:38 --> 00:03:43
The third <b>parameter</b> which is the correct <b>output</b> value is assigned to the variable <b>result.</b>

39
00:03:44 --> 00:03:51
We check whether the value returned by the <b>gcd function</b> is equal to the value in the <b>variable result.</b>

40
00:03:52 --> 00:03:55
Finally it prints the message accordingly.

41
00:03:56 --> 00:04:04
In the <b>terminal</b>, type <b>python3 automate</b> underscore <b>test</b> underscore <b>gcd.py</b>

42
00:04:05 --> 00:04:11
As you can see, all the three <b>test cases</b> in <b>testcases.txt</b> are passed.

43
00:04:12 --> 00:04:19
The value calculated by the <b>gcd function</b> is equal to the output value provided in the <b>testcases.txt.</b>

44
00:04:20 --> 00:04:25
Pause the video. Try this exercise and then resume the video.

45
00:04:26 --> 00:04:32
For the same inputs as <b>gcd</b> write <b>automated tests</b> for <b>LCM. </b>

46
00:04:33 --> 00:04:37
Use the data from the file <b>lcmtestcases.txt</b>

47
00:04:38 --> 00:04:41
Switch to the <b>terminal</b> for the solution.

48
00:04:42 --> 00:04:51
Let us see the code to calculate <b>lcd</b> of two numbers.
<p>The file name is <b>find</b> underscore <b>lcm.py</b>
</p>

49
00:04:52 --> 00:04:56
This is the data file for the <b>lcm</b> test cases.

50
00:04:57 --> 00:05:01
This file name is <b>lcmtestcases.txt</b>

51
00:05:02 --> 00:05:06
Note that both these files should be in the current <b>working directory.</b>

52
00:05:07 --> 00:05:10
Let us now run the <b>script</b> and <b>test</b> our <b>code.</b>

53
00:05:11 --> 00:05:16
Type <b>python3 find</b> underscore <b>lcm.py</b>

54
00:05:17 --> 00:05:25
Here, the third test case failed. Because the corresponding input in <b>lcmtestcases.txt</b> is incorrect.

55
00:05:26 --> 00:05:31
This is to check the behavior of the program on incorrect conditions.

56
00:05:32 --> 00:05:38
A good <b>program</b> should be <b>readable</b>. So others can extend and improve it.

57
00:05:39 --> 00:05:42
<b>Code</b> is read more often than it is written.

58
00:05:43 --> 00:05:48
We choose a name so that it becomes easier to understand its usage.

59
00:05:49 --> 00:05:54
As we can see in the example, it is very easy to understand what the <b>code</b> is doing.

60
00:05:55 --> 00:05:59
Proper naming helps so much in understanding the <b>code.</b>

61
00:06:00 --> 00:06:05
Also one should keep in mind the following things while writing a <b>code</b> in Python.

62
00:06:06 --> 00:06:08
<b>Four Space Indentation </b>

63
00:06:09 --> 00:06:12
79 characters limit on a line

64
00:06:13 --> 00:06:17
<b>Functions</b> and <b>methods</b> should be separated with two blank lines.

65
00:06:18 --> 00:06:22
Use <b>Docstring</b> to document a specific segment of code.

66
00:06:23 --> 00:06:27
Use <b>whitespace</b> around <b>operators</b> and after punctuations.

67
00:06:28 --> 00:06:33
This brings us to the end of this tutorial. Let us summarize.

68
00:06:34 --> 00:06:39
In this tutorial, we have learnt to,
<p>Create simple <b>tests</b> for a <b>function </b>
</p>

69
00:06:40 --> 00:06:48
<b>Automate tests</b> using many <b>predefined test cases</b> and Use <b>python coding standards.</b>

70
00:06:49 --> 00:06:52
Here is a self assessment question for you to solve

71
00:06:53 --> 00:06:58
What is the proper indentation for <b>python code</b> according to the <b>style</b> guidelines?

72
00:06:59 --> 00:07:07
And the answer,  Four Space Indentation is required for writing a python code according to the style guidelines.

73
00:07:08 --> 00:07:11
Please post your timed queries in this forum.

74
00:07:12 --> 00:07:21
Please post your general queries on Python in this forum.
<p>FOSSEE team coordinates the TBC project.
</p>

75
00:07:22 --> 00:07:32
Spoken Tutorial Project is funded by NMEICT, MHRD, Govt. of India. For more details, visit this website.

76
00:07:33 --> 00:07:38
This is Priya from IIT Bombay signing off. Thanks for watching.

