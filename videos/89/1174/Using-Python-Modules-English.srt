<b>Narration</b>

1
00:00:01 --> 00:00:05
Welcome to the spoken tutorial on <b>Using Python Modules</b>.

2
00:00:06 --> 00:00:21
In this tutorial, you will learn to-
<p>Execute <b>Python scripts</b> from <b>command line</b>
</p><p>Use <b>import</b> in <b>scripts </b>and
</p><p>Import <b>numpy </b>and<b> matplotlib.pyplot modules</b>
</p>

3
00:00:22 --> 00:00:39
To record this tutorial, I am using
<p><b>Ubuntu Linux 16.04</b> operating system
</p><p><b>Python 3.4.3</b>
</p><p><b>IPython 5.1.0 </b>and
</p><p><b>Gedit text editor</b>
</p>

4
00:00:40 --> 00:00:49
To practise this tutorial, you should know how to
<p>Use <b>plot</b> interactively
</p><p>Embellish and save a <b>plot</b>
</p>

5
00:00:50 --> 00:00:54
If not, see the relevant <b>Python</b> tutorials on this website.

6
00:00:55 --> 00:00:57
First we will learn what is a <b>module</b>.

7
00:00:58 --> 00:01:03
A <b>module</b> is a file containing <b>Python definitions</b> and <b>statements</b>.

8
00:01:04 --> 00:01:11
<b>Modules</b> are used to break down large programs into small manageable and organized files.

9
00:01:12 --> 00:01:18
<b>Definitions</b> from a <b>module</b> can be <b>imported</b> into other <b>modules</b> or to the <b>main module</b>.

10
00:01:19 --> 00:01:23
Now let us see how to run a <b>Python script</b> from <b>command line</b>.

11
00:01:24 --> 00:01:32
Open any <b>text editor</b> and type,  <b>print</b><i> inside brackets inside double quotes </i><b>Hello World</b>

12
00:01:33 --> 00:01:37
We have created a simple <b>Python script</b> to print <b>Hello World</b>.

13
00:01:38 --> 00:01:43
Save this <b>script</b> as <b>hello.py</b> in the current <b>working directory</b>.

14
00:01:44 --> 00:01:51
Now let us open the <b>terminal.</b>
<p>Then navigate to the <b>directory</b> where <b>hello.py</b> is saved.
</p>

15
00:01:52 --> 00:02:03
Now type, <b>python3 hello.py</b> and press <b>Enter</b>.
<p>It executes the <b>script</b> and gives the output as <b>Hello World.</b>
</p>

16
00:02:04 --> 00:02:10
From here onwards, remember to press the <b>Enter</b> key after typing every <b>command</b> on the <b>terminal</b>.

17
00:02:11 --> 00:02:16
Next we will see how to <b>import modules</b> and use them in <b>Python scripts.</b>

18
00:02:17 --> 00:02:22
Let me open the file<b> four</b><i> underscore </i><b>plot.py</b> in the <b>text editor.</b>

19
00:02:23 --> 00:02:30
This file is available in the <b>Code files </b>link of this tutorial. You can download and use it.

20
00:02:31 --> 00:02:37
This <b>code</b> will <b>plot</b> for <b>x, -x, sin of x </b>and<b> xsin of x</b>

21
00:02:38 --> 00:02:42
When we <b>run</b> this <b>code</b>, we will see the final <b>plot</b> as shown here.

22
00:02:43 --> 00:02:48
Now let us <b>run</b> the file <b>four </b><i>underscore</i><b> plot.py</b> as a <b>Python script</b>.

23
00:02:49 --> 00:02:54
Type, <b>python3</b> <b>four </b><i>underscore</i><b> plot.py</b>

24
00:02:55 --> 00:02:58
It gives an error <b>linspace()</b> is not defined.

25
00:02:59 --> 00:03:04
It means that, <b>function linspace()</b> is not available in the current <b>namespace</b>.

26
00:03:05 --> 00:03:10
A <b>namespace</b> is a system for making all the names in a program to be unique.

27
00:03:11 --> 00:03:15
Let us go back to the file<b> four </b><i>underscore</i><b> plot.py.</b>

28
00:03:16 --> 00:03:23
Add this line as the first line in the <b>script</b>, <b>from numpy import </b><i>asterisk</i>

29
00:03:24 --> 00:03:31
When we use<b> asterisk</b> in <b>imports, </b>all the <b>functions</b> and <b>constants</b> are imported from <b>numpy module</b>.

30
00:03:32 --> 00:03:35
<b>linspace</b> is a <b>function</b> available in <b>numpy.</b>

31
00:03:36 --> 00:03:39
Press <b>Ctrl + S</b> to save the file.

32
00:03:40 --> 00:03:48
Now let us run the <b>script</b> again. Now it gave another <b>NameError: name ‘plot’ is not defined.</b>

33
00:03:49 --> 00:03:53
Let us edit the <b>four </b><i>underscore</i><b> plot.py </b>file<b> </b>again.

34
00:03:54 --> 00:04:03
Add the following as the second line in our <b>script</b>. <b>from matplotlib.pyplot import *</b>

35
00:04:04 --> 00:04:05
Now save the file.

36
00:04:06 --> 00:04:11
<b>plot</b> is a <b>function</b> which is available in the <b>matplotlib.pyplot. </b>

37
00:04:12 --> 00:04:18
We will run the <b>script</b> again. We get the output now.

38
00:04:19 --> 00:04:23
We <b>imported</b> all the required <b>modules</b> using the <b>keyword import</b>.

39
00:04:24 --> 00:04:27
Let me close this window.

40
00:04:28 --> 00:04:36
We can import only <b>functions</b> which are required from a <b>module</b> as, <b>from numpy import linspace, pi, sin</b>

41
00:04:37 --> 00:04:43
instead of, <b>from numpy import *</b>

42
00:04:44 --> 00:04:58
In the same way we can import only required <b>functions</b> from <b>matplotlib.pyplot</b>
<p>instead of, <b>from matplotlib.pyplot import *</b>
</p>

43
00:04:59 --> 00:05:02
It is always good to use <b>function</b> names instead of <b>asterisk</b>.

44
00:05:03 --> 00:05:10
If we use <b>asterisk</b> to <b>import</b> from a particular <b>module,</b> all the <b>functions </b>will be imported.

45
00:05:11 --> 00:05:16
It replaces some existing <b>functions</b> with the same name in the <b>namespace</b>.

46
00:05:17 --> 00:05:24
Now we will add only required <b>functions</b> from <b>numpy</b> and <b>matplotlib.pyplot</b>

47
00:05:25 --> 00:05:26
Let us save the file.

48
00:05:27 --> 00:05:31
We will run the code again in the <b>terminal</b>.

49
00:05:32 --> 00:05:39
Here, we got the <b>plots </b>for<b> x, -x, sin of x </b>and<b> xsin of x</b> in a single <b>figure</b>.

50
00:05:40 --> 00:05:45
In this method we <b>imported</b> all the required <b>functions</b> to the current <b>namespace</b>.

51
00:05:46 --> 00:05:50
There is another way of fixing errors. Let us see that.

52
00:05:51 --> 00:05:55
Open the file <b>another</b><i> underscore </i><b>fix.py</b>

53
00:05:56 --> 00:06:00
This file is also available in the <b>Code files</b> link of this tutorial.

54
00:06:01 --> 00:06:07
Notice that we are going to use the name <b>plt</b> instead of <b>matplotlib.pyplot</b>.<b> </b>

55
00:06:08 --> 00:06:13
<b>plt </b>is used as alias to the <b>module matplotlib.pyplot</b>

56
00:06:14 --> 00:06:21
Now, we use <b>numpy.pi </b>instead of just<b> pi </b>as we did in four<i> underscore </i>plot.py.

57
00:06:22 --> 00:06:42
<b>Plot functions </b>are called as
<p><b>plt.plot()</b>
</p><p><b>plt.legend()</b>
</p><p><b>plt.annotate() </b>
</p><p><b>plt.xlim</b>
</p><p><b>plt.ylim</b>
</p><p>and <b>plt.show()</b>
</p>

58
00:06:43 --> 00:06:50
The advantage is that <b>function</b> names in <b>imported modules</b> do not get added to the current <b>namespace</b>.

59
00:06:51 --> 00:06:58
In order to use a <b>function</b> in an <b>imported module</b>, we need to mention <b>module-name.function-name</b>

60
00:06:59 --> 00:07:04
Pause the video here.Try this exercise and then resume the video.

61
00:07:05 --> 00:07:11
Write a <b>python script</b> to <b>plot</b> a <b>sine wave</b> from<b> -2pi </b>to<b> 2pi</b>.

62
00:07:12 --> 00:07:26
Open the file <b>sine.py</b> for the solution. This file is also available in the <b>Code files</b> link. In the first line we <b>import</b> the required <b>functions.</b>

63
00:07:27 --> 00:07:33
The <b>functions linspace, sin </b>and<b> constant pi</b> are imported from the<b> module numpy</b>.

64
00:07:34 --> 00:07:43
We <b>import</b> the <b>functions plot, legend, show, title, xlabel </b>and<b> ylabel </b>from<b> matplotlib.pyplot.</b>

65
00:07:44 --> 00:07:47
And the rest of the <b>code</b> is to generate the <b>plot</b>.

66
00:07:48 --> 00:07:51
Let us run the <b>code</b> and see the output.

67
00:07:52 --> 00:07:57
In the <b>terminal</b>, type <b>python3</b> <b>sine.py</b>

68
00:07:58 --> 00:08:07
Now we can see our <b>sine plot</b>. Close the <b>terminal</b>.Let us move further in our topic.

69
00:08:08 --> 00:08:12
We can run <b>Python scripts</b> in <b>IPython interpreter </b>also.

70
00:08:13 --> 00:08:21
Open another <b>terminal</b> and start the <b>ipython interpreter</b> by typing <b>ipython3</b>

71
00:08:22 --> 00:08:34
Navigate to the <b>directory</b> where <b>four </b><i>underscore</i><b> plot.py</b> is saved and type <i>percentage</i><b> run four </b><i>underscore</i><b> plot.py</b>

72
00:08:35 --> 00:08:39
As before we can see the output with 4 <b>plots</b>.

73
00:08:40 --> 00:08:44
<b>Python</b> has a very rich <b>standard library</b> of <b>modules</b>.

74
00:08:45 --> 00:09:00
Some of the <b>standard modules</b> are,
<p>for<b> Math: math, random </b>
</p><p>for<b> Internet access: urllib2, smtplib</b>
</p><p>for<b> System and Command line arguments: sys </b>
</p>

75
00:09:01 --> 00:09:19
Few more <b>libraries</b>
<p>for<b> Operating system interface: os </b>
</p><p>for<b> regular expression: re </b>
</p><p>for<b> compression: gzip, zipfile, tarfile </b>
</p><p>For more information refer to the below link.
</p>

76
00:09:20 --> 00:09:25
This brings us to the end of this tutorial. Let us summarize.

77
00:09:26 --> 00:09:37
In this tutorial, we have learnt to,
<p>Run <b>scripts</b> from <b>command line</b>
</p><p><b>Import modules</b> by specifying the <b>module</b> name followed by an <b>asterisk</b>
</p>

78
00:09:38 --> 00:09:46
<b>Import</b> only the required <b>functions</b> from <b>modules</b> by specifying the <b>function</b> name
<p>Use <b>Python standard library</b>. 
</p>

79
00:09:47 --> 00:10:01
Here are some self assessment questions for you to solve
<p>1. Which among the below is the most correct?
</p><p>2. How the functions <b>xlim() </b>and <b>ylim</b>() can be imported to the current <b>namespace</b>? 
</p>

80
00:10:02 --> 00:10:17
And the answers,
<p>1. The option <b>from matplotlib.pyplot import plot</b> is the most correct one.
</p><p>Because <b>plot</b> is a <b>function</b> of <b>matplotlib.pyplot</b> <b>module</b>. 
</p>

81
00:10:18 --> 00:10:31
2. Functions <b>xlim</b>() and <b>ylim</b>() can be <b>imported</b> to the current <b>namespace</b> as, <b>from matplotlib.pyplot import xlim, ylim</b>

82
00:10:32 --> 00:10:35
Please post your timed queries in this forum.

83
00:10:36 --> 00:10:40
Please post your general queries on Python in this forum.

84
00:10:41 --> 00:10:44
FOSSEE team coordinates the TBC project.

85
00:10:45 --> 00:10:55
Spoken Tutorial Project is funded by NMEICT, MHRD, Govt. of India.For more details, visit this website.

86
00:10:56 --> 00:11:01
This is Priya from IIT Bombay signing off. Thanks for watching.

