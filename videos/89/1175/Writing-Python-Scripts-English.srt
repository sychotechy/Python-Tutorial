<b>Narration</b>

1
00:00:01 --> 00:00:05
Welcome to the spoken tutorial on <b>Writing Python scripts.</b>

2
00:00:06 --> 00:00:11
In this tutorial we will learn,  What is <b>importing</b> ?

3
00:00:12 --> 00:00:14
Write your own <b>Python modules</b> and

4
00:00:15 --> 00:00:24
Understand the double underscore <b>name</b> double underscore double equal to within double quotes double underscore <b>main double underscore idiom</b>

5
00:00:25 --> 00:00:33
To record this tutorial, I am using
<p><b>Ubuntu Linux 16.04</b> operating system
</p>

6
00:00:34 --> 00:00:36
<b>Python 3.4.3 </b>

7
00:00:37 --> 00:00:43
<b>IPython 5.1.0</b> and <b>Gedit text editor</b>

8
00:00:44 --> 00:00:52
To practise this tutorial, you should know how to  <b>Run</b> basic <b>Python commands</b> on the <b>IPython console </b>

9
00:00:53 --> 00:00:55
And Use <b>Python modules.</b>

10
00:00:56 --> 00:01:01
If not, see the relevant <b>Python</b> tutorials on this website.

11
00:01:02 --> 00:01:06
We can write <b>Python modules</b> to bundle <b>functions.</b>

12
00:01:07 --> 00:01:13
We can then make use of these <b>functions</b> by importing <b>modules</b> to other <b>scripts.</b>

13
00:01:14 --> 00:01:18
Let us first write a <b>function</b> and save it in a <b>script.</b>

14
00:01:19 --> 00:01:23
Open any <b>text editor</b> and type the below code.

15
00:01:24 --> 00:01:32
This <b>Python module</b> has a <b>function</b> to compute <b>gcd</b> of two numbers. Please take care of the indentation.

16
00:01:33 --> 00:01:42
We have included a <b>text case</b> in the <b>script</b>. This <b>text case</b> will check the <b>GCD function</b> everytime the <b>script</b> is run.

17
00:01:43 --> 00:01:49
Let us save the file as <b>gcd</b> underscore <b>script.py</b> in the current <b>working directory.</b>

18
00:01:50 --> 00:01:58
Open a new <b>terminal</b>. Type, <b>ipython3</b> and press <b>Enter.</b>

19
00:01:59 --> 00:02:05
From here onwards remember to press the <b>Enter</b> key after typing every <b>command</b> on the <b>terminal.</b>

20
00:02:06 --> 00:02:15
Now we will run the <b>script</b>. Type, percentage <b>run gcd</b> underscore <b>script dot py</b>

21
00:02:16 --> 00:02:20
We get an output which says <b>“Everything is OK”</b>.

22
00:02:21 --> 00:02:29
It means that the <b>test case</b> checking <b>gcd</b> inside brackets <b>40</b> comma <b>12</b> equals to <b>4</b> is passed.

23
00:02:30 --> 00:02:34
What if we want to use the <b>gcd function</b> in some other <b>scripts</b>?

24
00:02:35 --> 00:02:40
This is possible since every <b>Python</b> file can be used as a <b>module.</b>

25
00:02:41 --> 00:02:46
But first, we will understand what happens when we <b>import</b> a <b>module.</b>

26
00:02:47 --> 00:02:50
Type, <b>import sys</b>

27
00:02:51 --> 00:02:54
Now type <b>sys.path</b>

28
00:02:55 --> 00:03:04
We can see a list of locations. This indicates that <b>Python</b> searches for a <b>module</b> when it encounters an <b>import statement.</b>

29
00:03:05 --> 00:03:08
The <b>standard modules</b> are built into <b>Python</b> itself.

30
00:03:09 --> 00:03:19
Otherwise it is found in system locations like slash <b>usr</b> slash <b>lib</b> slash <b>python3.4</b> slash

31
00:03:20 --> 00:03:23
The first item in the <b>list</b> is an empty <b>string.</b>

32
00:03:24 --> 00:03:28
It means the current <b>working directory</b> is also searched.

33
00:03:29 --> 00:03:38
We can <b>import</b> a <b>module</b> present in the current <b>working directory</b>. Type, <b>import gcd</b> underscore <b>script</b>

34
00:03:39 --> 00:03:47
Since <b>gcd</b> underscore <b>script dot py</b> is in the current <b>working directory, import</b> will work directly.

35
00:03:48 --> 00:03:52
Type the <b>print statement</b> as shown here.

36
00:03:53 --> 00:03:59
We get the <b>gcd</b> of 187 and 391 as output, which is 17.

37
00:04:00 --> 00:04:06
We can also see the output <b>“Everything is OK”</b> that we added as <b>test code. </b>

38
00:04:07 --> 00:04:12
This is also executed when we imported <b>gcd</b> underscore <b>script.</b>

39
00:04:13 --> 00:04:17
The <b>test code</b> is added to check the <b>gcd function.</b>

40
00:04:18 --> 00:04:23
<b>Test code</b> should only be executed when we <b>run</b> the <b>Python script</b> independently.

41
00:04:24 --> 00:04:33
To execute the <b>test code</b> when the <b>module</b> is imported to other <b>scripts</b>, we can use double underscore <b>name</b> double underscore <b>variable.</b>

42
00:04:34 --> 00:04:37
Hereafter I will call this as <b>name variable</b>.

43
00:04:38 --> 00:04:44
First, we shall look at how to use the <b>variable</b> and then understand how it works.

44
00:04:45 --> 00:04:51
Now we will add this <b>variable</b> in the <b>script</b> <b>gcd</b> underscore <b>script dot py</b>

45
00:04:52 --> 00:05:06
Type the following after <b>return a statement</b>
<p><b> if</b> double underscore <b>name</b> double underscore double equal to inside double quotes double underscore <b>main</b> double underscore colon 
</p>

46
00:05:07 --> 00:05:09
Indent the code properly.

47
00:05:10 --> 00:05:11
Save the file.

48
00:05:12 --> 00:05:20
Let us <b>run</b> the <b>code</b>. Type, percentage <b>run gcd</b> underscore <b>script.py</b>

49
00:05:21 --> 00:05:27
We can see that the test is executed successfully and we get output as <b>Everything is OK</b>

50
00:05:28 --> 00:05:32
Now we will check the changes by <b>importing</b> the <b>module. </b>

51
00:05:33 --> 00:05:40
Type, <b>import gcd_script</b>
<p>We didn’t see any changes.
</p>

52
00:05:41 --> 00:05:48
Note that, once a <b>module</b> is imported, it cannot be <b>imported</b> again in an existing <b>IPython console.</b>

53
00:05:49 --> 00:05:55
So we will exit the existing <b>IPython console</b> by typing <b>exit.</b>

54
00:05:56 --> 00:06:03
Open another <b>terminal</b>. Type <b>ipython3</b>.

55
00:06:04 --> 00:06:13
Now we will <b>import gcd</b> underscore <b>script.py</b>. Type,<b> import gcd</b> underscore <b>script</b>

56
00:06:14 --> 00:06:21
We can see that now the <b>test code</b> is not executed. <b>Everything is OK</b> is not displayed as output.

57
00:06:22 --> 00:06:30
The <b>name variable</b> is local to every <b>module</b>. It is equal to <b>main</b> only when the file is run as a <b>script.</b>

58
00:06:31 --> 00:06:42
Hence, all the <b>code</b> under the <b>block, if name</b> double equal to within double quotes <b>main</b> is executed only when the file is run as a <b>Python script.</b>

59
00:06:43 --> 00:06:45
Switch back to the <b>terminal.</b>

60
00:06:46 --> 00:06:53
Type the following <b>code</b> which checks whether two numbers are relatively prime.

61
00:06:54 --> 00:06:59
We have <b>imported gcd function</b> from <b>gcd</b> underscore <b>script.</b>

62
00:07:00 --> 00:07:05
And use it in our calculations without the <b>test code</b> being executed.

63
00:07:06 --> 00:07:11
Two numbers are relatively prime when their <b>gcd</b> is equal to one.

64
00:07:12 --> 00:07:17
So we get output as <b>Yes, 11 and 3 are relatively prime.</b>

65
00:07:18 --> 00:07:25
Every <b>Python</b> file can be<b> run</b> in two ways:  As an independent stand-alone <b>script </b> or

66
00:07:26 --> 00:07:32
As a <b>Python module</b> which can be imported by other <b>Python scripts</b> or <b>modules.</b>

67
00:07:33 --> 00:07:36
This brings us to the end of this tutorial. Let us summarize.

68
00:07:37 --> 00:07:43
In this tutorial, we have learnt to,  <b>Import a module.</b>

69
00:07:44 --> 00:07:46
Use a <b>script</b> as a <b>module </b>

70
00:07:47 --> 00:07:51
Write <b>test condition</b> using the <b>name variable</b> and

71
00:07:52 --> 00:07:56
Restart <b>IPython3</b> if a changed <b>module</b> is to be imported again

72
00:07:57 --> 00:08:07
Here are some self assessment questions for you to solve
<p>First. Which of the following <b>variables</b> contains the locations to search for <b>Python modules</b>
</p>

73
00:08:08 --> 00:08:13
Second. A <b>module</b> should contain only one <b>function</b>. True or False

74
00:08:14 --> 00:08:21
And the answers.  First. <b>sys.path</b> contains the locations to search for <b>Python modules.</b>

75
00:08:22 --> 00:08:27
Second. <b>False</b>. A <b>module</b> can contain a wide range of <b>functions.</b>

76
00:08:28 --> 00:08:31
Please post your timed queries in this forum.

77
00:08:32 --> 00:08:36
Please post your general queries on Python in this forum.

78
00:08:37 --> 00:08:40
FOSSEE team coordinates the TBC project.

79
00:08:41 --> 00:08:50
Spoken Tutorial Project is funded by NMEICT, MHRD, Govt. of India. For more details, visit this website.

80
00:08:51 --> 00:08:56
This is Priya from IIT Bombay signing off. Thanks for watching.

